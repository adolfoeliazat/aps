Things to Consider

    - [DONE] Organizing related steps of test scenarios into groups (and subgroups, thus making hierarchy)
      Example:
          Submitting some form multiple times with different combinations of erroneous fields to make sure all
          kinds of shit are handled properly. Then going to another form and doing similar thing.
          Scenario steps will be hard to distinguish.
          
    - Make separation between client-side and server-side usage of ui.ts cleaner.
      Remove `typeof window` checks scattered throughout the file.
      
      
Forget-Me-Nots

    - Interaction between page auto-refresh, hot code reloading, and navigation to other pages.
      As implemented in dashboard. // @ctx forgetmenot-1-x
      
          
Funny Function Names
    Betsy
    melinda
    makeHrundels
    limpopo

Exceptions
    raiseWithMeta
    revealStack({exception}) or revealStack({stack})

Control Development
    noStateContributions
    
Controls
    renderExceptionTriangle
    renderExceptionTriangleAndRevealStack
    renderRedExclamationTriangleLabel
    renderDefinitionStackStrip
    preludeWithGreenCheck
    pira

CSS
    showOnParentHovered
    showOnParentHovered-parent
    
Contexts
     // @ctx backend meta
     // @ctx db template
     // @ctx page ...
     // @ctx fiddle with aps-test db 
     // @ctx fiddle with requests
     // @ctx domains
     
    
----------------

    
    
building make-config.ts

showTestActionHand
haltTheWorld
.aniBlinkingFast
setTestSpeed
art.respectArtPauses
implementTestFacilities
getRPCLagForAutomatedTests
globalizeStuff
debugStatusBar
debugFuns (little buttons in bottom-right corner)

uiStateScope
uispan

traceBeginHandler
traceEndHandler

q() {inline: ...}

openDebugConsole()
'Hand pause'

CORS headers
newExpress()

makeRPC()

tame tamy getTamePath came
sufindex

revealTestGlobalControls

handleExceptionInRender
errorToMappedClientStackString
renderStacks

childrenContributeStateOnlyIfMyElementIsTamed 
beginLogTime

tame shame tamy shamy tamyShamy

callDebugRPWithProgress

initDebugFunctions

hot shit
runHotCodeUpdateStuff
dlog(`Hot-refreshed Impl`)
applyHotCode
danger_getHotShitCodeEntries
danger_getPieceOfCodeBetweenTags

exclude element from testing
noStateContributions

openDebugPane
open debug pane
show debug pane
with red close icon
with red close button

compiler compile.js captuta

taby tabydef

implementTestClick: {onClick: ...}


ctx running test scenario

Q: Why revealing a part of revealer doesn't show nearby elements (parents, siblings, etc.)?
A: Because revealing a part of revealer means vanishing old revealer, so that elements no longer exist.

Renderers:
renderDefinitionStackStrip

Tiffany


    














