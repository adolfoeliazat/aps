Forget-Me-Nots

    - A tangle of page auto-refresh, hot code reloading, and navigation to other pages.
      As implemented in dashboard. // @ctx forgetmenot-1-x
      
          
Funny Function Names
    Betsy
    melinda
    makeHrundels
    limpopo
    art.gertrude

Exceptions
    raiseWithMeta
    revealStack({exception}) or revealStack({stack})

Control Development
    noStateContributions
    ignoreDebugCtrlShiftClick
    
Controls
    renderExceptionTriangle
    renderExceptionTriangleAndRevealStack
    renderRedExclamationTriangleLabel
    renderDefinitionStackStrip
    renderTraceBetsy
    preludeWithGreenCheck
    pira
    makeBackendMetaPanel
    renderProfile
    horizontala hor1 hor2
    renderTrain
    
ui.*
    async ui.loadPageForURL
    browser.ui
    
Debugging
    debugPanes.set
    openDebugPane
    debugToggleBetsyTitled
    renderInRevelationPane
    implementTestClick
    implementTestKeyDown

CSS
    showOnParentHovered
    showOnParentHovered-parent
    
Contexts
    // @ctx backend meta
    // @ctx db template
    // @ctx page ...
    // @ctx fiddle with aps-test db 
    // @ctx db create and populate test-template-ua-1 database
    // @ctx fiddle with requests
    // @ctx domains
    // @ctx css
    // @ctx scrap generate dates
    // @ctx hot shit
    // @ctx exported shit
    // @ctx debug functions
    'play around with revealTrains'
     
TODO

    - [DONE] Organizing related steps of test scenarios into groups (and subgroups, thus making hierarchy)
          
    - Make separation between client-side and server-side usage of ui.ts cleaner.
      Get rid off `if (typeof window === 'object')` checks scattered throughout the file.
      
    - Revisit, clean up, document decisions, etc. for hot code reloading
    
    - Show convenient stack trace pane for non-promise exceptions. In same way as it's now implemented for unhandledrejection.
    
    - [DONE] After updating user, scroll to it
    
    - [DONE] Implement on client something similar to backend traces
    
    - Embrace visual testing. Things to look at:
          http://phantomjs.org/
          http://casperjs.org/
          https://github.com/Huddle/PhantomCSS
          https://github.com/facebookarchive/huxley
          https://github.com/bslatkin/dpxdt
          http://stackoverflow.com/questions/4912092/using-html5-canvas-javascript-to-take-screenshots/6678156#6678156
          https://developer.chrome.com/extensions/api_index
          https://github.com/AminaG/OpenScreenshot
          
    - Integrate semantic/semi-visual integration tests with Travis CI, so _all_ slow shit runs on each Git push.
      Things to investigate:
          - PhantomJS on Travis CI?
          - PostgreSQL?
          - Also deploy static sites to GitHub Pages on each push, and then test against that?
          - CORS requests from static site to shit running on Travis CI virtual machine?
          - Can I spawn backend.js process on Travis?
      
    
Heap
    $metaID
      
    
----------------

    
    
building make-config.ts

showTestActionHand
haltTheWorld
.aniBlinkingFast
setTestSpeed
art.respectArtPauses
implementTestFacilities
getRPCLagForAutomatedTests
globalizeStuff
debugStatusBar
debugFuns (little buttons in bottom-right corner)

uiStateScope
uispan

traceBeginHandler
traceEndHandler

q() {inline: ...}

openDebugConsole()
'Hand pause'

CORS headers
newExpress()

makeRPC()

tame tamy getTamePath came
sufindex

revealTestGlobalControls

handleExceptionInRender
errorToMappedClientStackString
renderStacks

childrenContributeStateOnlyIfMyElementIsTamed 
beginLogTime

tame shame tamy shamy tamyShamy

callDebugRPWithProgress

initDebugFunctions

hot shit
runHotCodeUpdateStuff
dlog(`Hot-refreshed Impl`)
applyHotCode
danger_getHotShitCodeEntries
danger_getPieceOfCodeBetweenTags

exclude element from testing
noStateContributions

openDebugPane
open debug pane
show debug pane
with red close icon
with red close button

compiler compile.js captuta

taby tabydef

implementTestClick: {onClick: ...}


ctx running test scenario

Q: Why revealing a part of revealer doesn't show nearby elements (parents, siblings, etc.)?
A: Because revealing a part of revealer means vanishing old revealer, so that elements no longer exist.

Renderers:
renderDefinitionStackStrip

Tiffany


    














