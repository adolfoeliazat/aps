- User enters static URL into browser
- Static page is displayed immediately
- Bundle starts loading
- If bundle has time to load before user clicks some link, all links are changed from static hrefs to SPA behavior




========================================================================================================


Body can be (1) static content, (2) spinner until bundle.js is loaded, (3) rendered dynamic content

Private dynamic page is requested via direct URL.
Until bundle.js is loaded, in body we display spinner. But what's in navbar?
Until bundle.js is loaded and, after that, until sign-in information (if there's one in local storage)
is synchronized with backend we don't know if user is actually entitled for that page.
So, in body it's definitely spinner, because we have nothing to show without bundle.js anyway.

If sign-in information is in local storage, we can optimistically assume, user credentials are OK.
But even with that, user can be allowed only for certain pages. Like, for example, until writer's profile is approved,
she can only use Profile and Support pages. Other options, like My Orders, should not be displayed on navbar to avoid confusion.
Showing all options on navbar and then suddenly hiding some of them upon synchronization with backend doesn't seem to be
a good idea.

If user requested dynamic page via direct URL
    - Until bundle.js is loaded. We show static version of navbar with no items highlighted. In body we show spinner.
    - After bundle.js is loaded
          - If there's no sign-in information in local storage
                - If requested page is priva
          - If there's sign-in information in local storage, request is made to backend for synchronization.
            Until synchronization response is received, it's no point in hiding big spinner and showing something
            because complete page can be banned. And configuration of navbar can be anything depending on what backend says.


Bundle is loaded. Dynamic page is displayed. User clicks Prose/something.
Should not reload page.
Display new page title with spinner?
    Page title might have changed
Display just spinner?
    Page load will be fast and blinking spinner all the time is not good
Display empty page?
    No
Display small spinner somewhere. In navbar. Space for spinner should be reserved, so navbar doesn't jump.





Handling New Versions of Application
------------------------------------

What when there's new vesion of app available?
New version always means both new bundle.js and new backend.
I don't want to introduce notion of compatibility between versions. If new version is released, it should be used.

Scenario 1.
User is sitting on a dynamic page of the app, clicking buttons, doing stuff.
Application was updated.
User clicks something that cause request to backend.
Client sends its version with each request.
If client version doesn't match backend version, request is rejected with {shouldUpdate: true}.
Client displayes message that it should be reloaded because of update.

What if user was in the middle of doing something? Tough luck.
System should be designed in such way that client communicates with backend often, sending
portions of work. If backend rejects submission of document because of update, user just
resubmits to new version. No big deal.

Scenario 2.
User is looking at static page.


























