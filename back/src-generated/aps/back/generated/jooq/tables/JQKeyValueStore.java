/**
 * This class is generated by jOOQ
 */
package aps.back.generated.jooq.tables;


import aps.back.generated.jooq.JQPublic;
import aps.back.generated.jooq.Keys;
import aps.back.generated.jooq.tables.records.JQKeyValueStoreRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JQKeyValueStore extends TableImpl<JQKeyValueStoreRecord> {

    private static final long serialVersionUID = -1331372089;

    /**
     * The reference instance of <code>public.key_value_store</code>
     */
    public static final JQKeyValueStore KEY_VALUE_STORE = new JQKeyValueStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JQKeyValueStoreRecord> getRecordType() {
        return JQKeyValueStoreRecord.class;
    }

    /**
     * The column <code>public.key_value_store.id</code>.
     */
    public final TableField<JQKeyValueStoreRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('key_value_store_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.key_value_store.deleted</code>.
     */
    public final TableField<JQKeyValueStoreRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.key_value_store.inserted_at</code>.
     */
    public final TableField<JQKeyValueStoreRecord, Timestamp> INSERTED_AT = createField("inserted_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.key_value_store.updated_at</code>.
     */
    public final TableField<JQKeyValueStoreRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.key_value_store.key</code>.
     */
    public final TableField<JQKeyValueStoreRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.key_value_store.value</code>.
     */
    public final TableField<JQKeyValueStoreRecord, Object> VALUE = createField("value", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * Create a <code>public.key_value_store</code> table reference
     */
    public JQKeyValueStore() {
        this("key_value_store", null);
    }

    /**
     * Create an aliased <code>public.key_value_store</code> table reference
     */
    public JQKeyValueStore(String alias) {
        this(alias, KEY_VALUE_STORE);
    }

    private JQKeyValueStore(String alias, Table<JQKeyValueStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private JQKeyValueStore(String alias, Table<JQKeyValueStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JQPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JQKeyValueStoreRecord, Long> getIdentity() {
        return Keys.IDENTITY_KEY_VALUE_STORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JQKeyValueStoreRecord> getPrimaryKey() {
        return Keys.KEY_VALUE_STORE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JQKeyValueStoreRecord>> getKeys() {
        return Arrays.<UniqueKey<JQKeyValueStoreRecord>>asList(Keys.KEY_VALUE_STORE_PKEY, Keys.KEY_VALUE_STORE_KEY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JQKeyValueStore as(String alias) {
        return new JQKeyValueStore(alias, this);
    }

    /**
     * Rename this table
     */
    public JQKeyValueStore rename(String name) {
        return new JQKeyValueStore(name, null);
    }
}
