/*
 * This file is generated by jOOQ.
*/
package aps.back.generated.jooq.tables;


import aps.back.generated.jooq.JQPublic;
import aps.back.generated.jooq.Keys;
import aps.back.generated.jooq.tables.records.JQUserTokensRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JQUserTokens extends TableImpl<JQUserTokensRecord> {

    private static final long serialVersionUID = -1093009615;

    /**
     * The reference instance of <code>public.user_tokens</code>
     */
    public static final JQUserTokens USER_TOKENS = new JQUserTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JQUserTokensRecord> getRecordType() {
        return JQUserTokensRecord.class;
    }

    /**
     * The column <code>public.user_tokens.id</code>.
     */
    public final TableField<JQUserTokensRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_tokens_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.user_tokens.deleted</code>.
     */
    public final TableField<JQUserTokensRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.user_tokens.inserted_at</code>.
     */
    public final TableField<JQUserTokensRecord, Timestamp> INSERTED_AT = createField("inserted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.user_tokens.updated_at</code>.
     */
    public final TableField<JQUserTokensRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.user_tokens.user_id</code>.
     */
    public final TableField<JQUserTokensRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_tokens.token</code>.
     */
    public final TableField<JQUserTokensRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.user_tokens</code> table reference
     */
    public JQUserTokens() {
        this("user_tokens", null);
    }

    /**
     * Create an aliased <code>public.user_tokens</code> table reference
     */
    public JQUserTokens(String alias) {
        this(alias, USER_TOKENS);
    }

    private JQUserTokens(String alias, Table<JQUserTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private JQUserTokens(String alias, Table<JQUserTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JQPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JQUserTokensRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_TOKENS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JQUserTokensRecord> getPrimaryKey() {
        return Keys.USER_TOKENS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JQUserTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<JQUserTokensRecord>>asList(Keys.USER_TOKENS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JQUserTokensRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JQUserTokensRecord, ?>>asList(Keys.USER_TOKENS__USER_TOKENS_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JQUserTokens as(String alias) {
        return new JQUserTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JQUserTokens rename(String name) {
        return new JQUserTokens(name, null);
    }
}
