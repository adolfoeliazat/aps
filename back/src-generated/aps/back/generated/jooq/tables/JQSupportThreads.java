/**
 * This class is generated by jOOQ
 */
package aps.back.generated.jooq.tables;


import aps.back.generated.jooq.JQPublic;
import aps.back.generated.jooq.Keys;
import aps.back.generated.jooq.tables.records.JQSupportThreadsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JQSupportThreads extends TableImpl<JQSupportThreadsRecord> {

    private static final long serialVersionUID = 513565508;

    /**
     * The reference instance of <code>public.support_threads</code>
     */
    public static final JQSupportThreads SUPPORT_THREADS = new JQSupportThreads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JQSupportThreadsRecord> getRecordType() {
        return JQSupportThreadsRecord.class;
    }

    /**
     * The column <code>public.support_threads.id</code>.
     */
    public final TableField<JQSupportThreadsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('support_threads_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.support_threads.deleted</code>.
     */
    public final TableField<JQSupportThreadsRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.support_threads.inserted_at</code>.
     */
    public final TableField<JQSupportThreadsRecord, Timestamp> INSERTED_AT = createField("inserted_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.support_threads.updated_at</code>.
     */
    public final TableField<JQSupportThreadsRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.support_threads.tslang</code>.
     */
    public final TableField<JQSupportThreadsRecord, String> TSLANG = createField("tslang", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.support_threads.topic</code>.
     */
    public final TableField<JQSupportThreadsRecord, String> TOPIC = createField("topic", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.support_threads.supportee_id</code>.
     */
    public final TableField<JQSupportThreadsRecord, Long> SUPPORTEE_ID = createField("supportee_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.support_threads.supporter_id</code>.
     */
    public final TableField<JQSupportThreadsRecord, Long> SUPPORTER_ID = createField("supporter_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.support_threads.status</code>.
     */
    public final TableField<JQSupportThreadsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.support_threads</code> table reference
     */
    public JQSupportThreads() {
        this("support_threads", null);
    }

    /**
     * Create an aliased <code>public.support_threads</code> table reference
     */
    public JQSupportThreads(String alias) {
        this(alias, SUPPORT_THREADS);
    }

    private JQSupportThreads(String alias, Table<JQSupportThreadsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JQSupportThreads(String alias, Table<JQSupportThreadsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JQPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JQSupportThreadsRecord, Long> getIdentity() {
        return Keys.IDENTITY_SUPPORT_THREADS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JQSupportThreadsRecord> getPrimaryKey() {
        return Keys.SUPPORT_THREADS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JQSupportThreadsRecord>> getKeys() {
        return Arrays.<UniqueKey<JQSupportThreadsRecord>>asList(Keys.SUPPORT_THREADS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JQSupportThreadsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JQSupportThreadsRecord, ?>>asList(Keys.SUPPORT_THREADS__SUPPORT_THREADS_SUPPORTEE_ID_FKEY, Keys.SUPPORT_THREADS__SUPPORT_THREADS_SUPPORTER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JQSupportThreads as(String alias) {
        return new JQSupportThreads(alias, this);
    }

    /**
     * Rename this table
     */
    public JQSupportThreads rename(String name) {
        return new JQSupportThreads(name, null);
    }
}
