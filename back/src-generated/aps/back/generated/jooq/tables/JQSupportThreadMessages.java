/*
 * This file is generated by jOOQ.
*/
package aps.back.generated.jooq.tables;


import aps.back.PostgresJSONBJacksonJsonNodeBinding;
import aps.back.generated.jooq.JQPublic;
import aps.back.generated.jooq.Keys;
import aps.back.generated.jooq.tables.records.JQSupportThreadMessagesRecord;

import com.fasterxml.jackson.databind.JsonNode;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JQSupportThreadMessages extends TableImpl<JQSupportThreadMessagesRecord> {

    private static final long serialVersionUID = -751216302;

    /**
     * The reference instance of <code>public.support_thread_messages</code>
     */
    public static final JQSupportThreadMessages SUPPORT_THREAD_MESSAGES = new JQSupportThreadMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JQSupportThreadMessagesRecord> getRecordType() {
        return JQSupportThreadMessagesRecord.class;
    }

    /**
     * The column <code>public.support_thread_messages.id</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('support_thread_messages_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.support_thread_messages.deleted</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.inserted_at</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Timestamp> INSERTED_AT = createField("inserted_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.updated_at</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.tslang</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, String> TSLANG = createField("tslang", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.thread_id</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Long> THREAD_ID = createField("thread_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.sender_id</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Long> SENDER_ID = createField("sender_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.recipient_id</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, Long> RECIPIENT_ID = createField("recipient_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.support_thread_messages.message</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.support_thread_messages.data</code>.
     */
    public final TableField<JQSupportThreadMessagesRecord, JsonNode> DATA = createField("data", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "", new PostgresJSONBJacksonJsonNodeBinding());

    /**
     * Create a <code>public.support_thread_messages</code> table reference
     */
    public JQSupportThreadMessages() {
        this("support_thread_messages", null);
    }

    /**
     * Create an aliased <code>public.support_thread_messages</code> table reference
     */
    public JQSupportThreadMessages(String alias) {
        this(alias, SUPPORT_THREAD_MESSAGES);
    }

    private JQSupportThreadMessages(String alias, Table<JQSupportThreadMessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private JQSupportThreadMessages(String alias, Table<JQSupportThreadMessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JQPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JQSupportThreadMessagesRecord, Long> getIdentity() {
        return Keys.IDENTITY_SUPPORT_THREAD_MESSAGES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JQSupportThreadMessagesRecord> getPrimaryKey() {
        return Keys.SUPPORT_THREAD_MESSAGES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JQSupportThreadMessagesRecord>> getKeys() {
        return Arrays.<UniqueKey<JQSupportThreadMessagesRecord>>asList(Keys.SUPPORT_THREAD_MESSAGES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JQSupportThreadMessagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JQSupportThreadMessagesRecord, ?>>asList(Keys.SUPPORT_THREAD_MESSAGES__SUPPORT_THREAD_MESSAGES_THREAD_ID_FKEY, Keys.SUPPORT_THREAD_MESSAGES__SUPPORT_THREAD_MESSAGES_SENDER_ID_FKEY, Keys.SUPPORT_THREAD_MESSAGES__SUPPORT_THREAD_MESSAGES_RECIPIENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JQSupportThreadMessages as(String alias) {
        return new JQSupportThreadMessages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JQSupportThreadMessages rename(String name) {
        return new JQSupportThreadMessages(name, null);
    }
}
